<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	">
	<!-- 扫描注解Bean -->
	<context:component-scan base-package="com.cwca.ssh.action" />
	<context:component-scan base-package="com.cwca.ssh.dao" />
	<context:component-scan base-package="com.cwca.ssh.service" />
	<context:component-scan base-package="com.cwca.ssh.comm" />
	<context:annotation-config />
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
	<!-- json -->
	<bean id="jsonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
	<bean id="stringConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringConverter" />
				<ref bean="jsonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<!-- 前台模版映射 JSP -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewNames" value="*.jsp" />
		<!-- 默认转向地址主目录 -->
		<property name="prefix" value="/" />
		<!-- 默认追加后缀 -->
		<property name="suffix" value="" />
		<!-- 默认编码格式 -->
		<property name="contentType" value="text/html; charset=utf-8" />
		<property name="order" value="0"></property>
	</bean>
	<!-- 前台模版映射 freeMarker -->
	<!-- 设置freeMarker的配置文件路径 -->
	<!-- <bean id="freemarkerConfiguration" -->
	<!-- class="org.springframework.beans.factory.config.PropertiesFactoryBean"> -->
	<!-- <property name="location" value="classpath:freemarker.properties" /> -->
	<!-- </bean> -->
	<!-- 配置freeMarker的模板路径 -->
	<!-- <bean id="freemarkerConfig" -->
	<!-- class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> -->
	<!--property name="freemarkerSettings" ref="freemarkerConfiguration"/ -->
	<!-- <property name="templateLoaderPath"> -->
	<!-- <value>/</value> -->
	<!-- </property> -->
	<!-- <property name="freemarkerVariables"> -->
	<!-- <map> -->
	<!-- <entry key="xml_escape" value-ref="fmXmlEscape" /> -->
	<!-- </map> -->
	<!-- </property> -->
	<!-- </bean> -->
	<!-- <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" 
		/> -->
	<!-- 配置freeMarker视图解析器 -->
	<!-- <bean id="freemarkerviewResolver" -->
	<!-- class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"> -->
	<!-- <property name="viewClass" -->
	<!-- value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" 
		/> -->
	<!-- <property name="viewNames" value="*.html" /> -->
	<!-- <property name="contentType" value="text/html; charset=utf-8" /> -->
	<!-- <property name="cache" value="false" /> -->
	<!-- <property name="prefix" value="" /> -->
	<!-- <property name="suffix" value="" /> -->
	<!-- <property name="order" value="1" /> -->
	<!-- <property name="requestContextAttribute" value="request" /> -->
	<!-- </bean> -->
	<!-- 引入jdbc配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
				<value>classpath*:hibernate.properties
				</value>
			</list>
		</property>
	</bean>
	<!-- druid 数据管理池配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_user}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.cwca.ssh</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<!-- <prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop> -->
			</props>
		</property>
	</bean>
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 开启注解事务 只对当前配置文件有效 -->
	<tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true" />
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
	<!-- hibernate 事务配置 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut"
			expression="execution(* com.cwca.ssh..service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
</beans>